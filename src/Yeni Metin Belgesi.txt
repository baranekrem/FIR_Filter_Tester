import sys
from PyQt5.QtWidgets import QDialog, QApplication, QVBoxLayout
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from gui import Ui_Dialog
from numpy import sin, pi, linspace
from scipy import fft
import filterCoeffs as filter

freqs = [0] * 3
sampleCount = 48000

lpf1 = filter.LowPassFilter(2500, 20000, 10)

def InputFunction():
    T = 1.0 / sampleCount

    xt = linspace((-pi / 2), (pi / 2), sampleCount)

    yt = sin(2 * freqs[0] * xt) + sin(2 * freqs[1] * xt) + sin(2 * freqs[2] * xt)

    xf = linspace(0.0, 1.0 / (2.0 * T), int(sampleCount / 2))

    yf = fft(yt)

    yf = (2.0 / sampleCount * abs(yf[:sampleCount // 2]))

    return (xt, yt, xf, yf)

def InputFunction2():
    xt = linspace((-pi / 2), (pi / 2), sampleCount)

    yt = sin(2 * freqs[0] * xt) + sin(2 * freqs[1] * xt) + sin(2 * freqs[2] * xt)
    
    yt = lpf1.FilterApply(yt)

    return (xt, yt)

class myDialog(QDialog, Ui_Dialog):
    def __init__(self):
        super(myDialog, self).__init__()
        self.setupUi(self)

        self.horizontalSlider1.sliderReleased.connect(self.silder1_Released)
        self.horizontalSlider2.sliderReleased.connect(self.silder2_Released)
        self.horizontalSlider3.sliderReleased.connect(self.silder3_Released)

        self.fig1 = Figure()
        canvas = FigureCanvasQTAgg(self.fig1)
        toolbar = NavigationToolbar(canvas, self)

        layout1 = QVBoxLayout()
        layout1.addWidget(canvas)
        layout1.addWidget(toolbar)

        self.widget1.setLayout(layout1)
        self.widget1.show()

        self.fig2 = Figure()
        canvas = FigureCanvasQTAgg(self.fig2)
        toolbar = NavigationToolbar(canvas, self)

        layout2 = QVBoxLayout()
        layout2.addWidget(canvas)
        layout2.addWidget(toolbar)

        self.widget2.setLayout(layout2)
        self.widget2.show()

    def plot(self):
        #xt, yt, xf, yf = InputFunction()
        xt, yt = InputFunction2()
        
        self.fig1.clear()
        self.ax1 = self.fig1.add_subplot(1, 1, 1)
        self.ax1.plot(xt, yt)
        self.ax1.grid(True)
        self.ax1.set_xlim((-2, 2))
        self.ax1.set_ylim((-4, 4))
        self.ax1.set_title('Input')
        k = self.ax1.set_ylabel('Magnitude')
        k.set_color(color='black')
        k.set_fontsize('large')
        self.fig1.canvas.draw()
        
        self.fig2.clear()
        self.ax2 = self.fig2.add_subplot(1, 1, 1)
        self.ax2.plot(xf, yf)
        self.ax2.grid(True)
        self.ax2.set_xlim((0, 10000))
        self.ax2.set_ylim((-2, 2))
        self.ax2.set_title('Input (Hz)')
        l = self.ax2.set_ylabel('Magnitude')
        l.set_color(color='black')
        l.set_fontsize('large')
        self.fig2.canvas.draw()

    def silder1_Released(self):
        freqs[0] = self.horizontalSlider1.value()
        self.label1.setText(str(freqs[0]) + ' Hz')
        self.plot()

    def silder2_Released(self):
        freqs[1] = self.horizontalSlider2.value()
        self.label2.setText(str(freqs[1]) + ' Hz')
        self.plot()

    def silder3_Released(self):
        freqs[2] = self.horizontalSlider3.value()
        self.label3.setText(str(freqs[2]) + ' Hz')
        self.plot()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    myWindow = myDialog()
    myWindow.show()
    sys.exit(app.exec_())